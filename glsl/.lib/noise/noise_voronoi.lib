#ifndef LIB_NOISE_VORONOI
#define LIB_NOISE_VORONOI

#include .lib/noise/noise_rand.lib

//------------------------------------------------------------------------------
// VORONOI PARAMETERS
//------------------------------------------------------------------------------

struct VoronoiParams {
    float cellSize;     // Base size of cells (default: 1.0)
    float jitter;       // How random are cell points (0-1)
    int metric;         // Distance metric (0=Euclidean, 1=Manhattan, 2=Chebyshev)
    bool invertOutput;  // Invert the output pattern
    float borderWidth; // Width of cell borders (0 for no borders)
};

VoronoiParams defaultVoronoiParams() {
    VoronoiParams params;
    params.cellSize = 1.0;
    params.jitter = 1.0;
    params.metric = 0;
    params.invertOutput = false;
    params.borderWidth = 0.0;
    return params;
}

//------------------------------------------------------------------------------
// VORONOI NOISE
//------------------------------------------------------------------------------

// Helper macro for the nested loops
#define VORONOI_LOOPS_2D for (int y = -1; y <= 1; y++) { \
                         for (int x = -1; x <= 1; x++)

#define VORONOI_LOOPS_3D for (int z = -1; z <= 1; z++) { \
                         for (int y = -1; y <= 1; y++) { \
                         for (int x = -1; x <= 1; x++)

#define VORONOI_LOOPS_4D for (int w = -1; w <= 1; w++) { \
                         for (int z = -1; z <= 1; z++) { \
                         for (int y = -1; y <= 1; y++) { \
                         for (int x = -1; x <= 1; x++)

#define VORONOI_LOOPS_END(dim) } // Repeated dim times

// Main Voronoi function macro
#define NOISE_VORONOI(vec_type, dim) \
vec2 noise_voronoi(vec_type p) { \
    vec_type i = floor(p); \
    vec_type f = fract(p); \
    \
    float minDist = 1.0; \
    float secondMinDist = 1.0; \
    \
    VORONOI_LOOPS_##dim { \
        vec_type neighbor = vec_type(float(x), float(y) VORONOI_EXTRA_COORDS_##dim); \
        vec_type point = neighbor + vec_type(noise_rand(i + neighbor)); \
        vec_type diff = neighbor + point - f; \
        float dist = length(diff); \
        \
        if (dist < minDist) { \
            secondMinDist = minDist; \
            minDist = dist; \
        } else if (dist < secondMinDist) { \
            secondMinDist = dist; \
        } \
    } VORONOI_LOOPS_END(dim) \
    \
    return vec2(minDist, secondMinDist); \
}

// Helper macros for extra coordinates
#define VORONOI_EXTRA_COORDS_2D
#define VORONOI_EXTRA_COORDS_3D , float(z)
#define VORONOI_EXTRA_COORDS_4D , float(z), float(w)

// Generate the functions
NOISE_VORONOI(vec2, 2D)
NOISE_VORONOI(vec3, 3D)
NOISE_VORONOI(vec4, 4D)

#define NOISE_VORONOI_PARAMETERIZED(vec_type, dim) \
vec2 noise_voronoi(vec_type p, VoronoiParams params) { \
    p /= params.cellSize; \
    vec_type i = floor(p); \
    vec_type f = fract(p); \
    \
    float minDist = 1.0; \
    float secondMinDist = 1.0; \
    \
    VORONOI_LOOPS_##dim { \
        vec_type neighbor = vec_type(float(x), float(y) VORONOI_EXTRA_COORDS_##dim); \
        vec_type point = neighbor + vec_type(noise_rand(i + neighbor)) * params.jitter; \
        vec_type diff = neighbor + point - f; \
        \
        float dist = math_distance(diff, params.metric); \
        if(params.metric == 0) dist = sqrt(dist); \
        \
        if (dist < minDist) { \
            secondMinDist = minDist; \
            minDist = dist; \
        } else if (dist < secondMinDist) { \
            secondMinDist = dist; \
        } \
    } VORONOI_LOOPS_END(dim) \
    \
    vec2 distances = vec2(minDist, secondMinDist); \
    float borderFactor = smoothstep(0.0, params.borderWidth, distances.y - distances.x); \
    \
    if(params.invertOutput) { \
        distances = vec2(1.0) - distances; \
    } \
    \
    return mix(distances, vec2(0.0), borderFactor); \
}

// Generate the parameterized functions
NOISE_VORONOI_PARAMETERIZED(vec2, 2D)
NOISE_VORONOI_PARAMETERIZED(vec3, 3D)
NOISE_VORONOI_PARAMETERIZED(vec4, 4D)

#endif