#ifndef LIB_NOISE_TURBULENCE
#define LIB_NOISE_TURBULENCE

#include .lib/noise/noise.lib
#include .lib/noise/noise_perlin.lib

//------------------------------------------------------------------------------
// TURBULENCE NOISE
//------------------------------------------------------------------------------

// Turbulence function using 2D Perlin noise
float noise_turbulence(vec2 p, float size) {
    float value = 0.0;
    float initial_size = size;

    while (size >= 1.0) {
        value += noise_perlin(p / size) * size;
        size /= 2.0;
    }

    return 0.5 * value / initial_size;
}

// Turbulence function using 3D Perlin noise
float noise_turbulence(vec3 p, float size) {
    float value = 0.0;
    float initial_size = size;

    while (size >= 1.0) {
        value += noise_gradient(p / size) * size;
        size /= 2.0;
    }

    return 0.5 * value / initial_size;
}

float noise_turbulence(vec4 p, float size) {
    float total = 0.0;
    float scale = 1.0;

    while (size > 1.0) {
        total += abs(noise_gradient(p * scale)) / scale;
        scale *= 2.0;
        size /= 2.0;
    }

    return total;
}

#endif