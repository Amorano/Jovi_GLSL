#ifndef LIB_NOISE_FRACTAL
#define LIB_NOISE_FRACTAL

#include .lib/noise/noise_gradient.lib

//------------------------------------------------------------------------------
// NOISE FRACTAL
//------------------------------------------------------------------------------

// 2D Fractal noise function with Perlin noise
float noise_fractal(vec2 p, float octaves, float persistence) {
    float total     = 0.0;
    float frequency = 1.0;
    float amplitude = 1.0;
    float max_value = 0.0;

    for (float i = 0.0; i < octaves; i++) {
        total     += noise_gradient(p * frequency) * amplitude;
        max_value += amplitude;
        amplitude *= persistence;
        frequency *= 2.0;
    }

    return total / max_value;
}

// 3D Fractal noise function with Perlin noise
float noise_fractal(vec3 p, float octaves, float persistence) {
    float total     = 0.0;
    float frequency = 1.0;
    float amplitude = 1.0;
    float max_value = 0.0;

    for (float i = 0.0; i < octaves; i++) {
        total     += noise_gradient(p * frequency) * amplitude;
        max_value += amplitude;
        amplitude *= persistence;
        frequency *= 2.0;
    }

    return total / max_value;
}

// 4D Fractal noise function with Perlin noise
float noise_fractal(vec4 p, float octaves, float persistence) {
    float total     = 0.0;
    float frequency = 1.0;
    float amplitude = 1.0;
    float max_value = 0.0;

    for (float i = 0.0; i < octaves; i++) {
        total     += noise_gradient(p * frequency) * amplitude;
        max_value += amplitude;
        amplitude *= persistence;
        frequency *= 2.0;
    }
    return total / max_value;
}

#endif