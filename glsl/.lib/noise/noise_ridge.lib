#ifndef LIB_NOISE_RIDGE
#define LIB_NOISE_RIDGE

#include .lib/noise/noise_simplex.lib
#include .lib/noise/noise_param.lib

//------------------------------------------------------------------------------
// RIDGE NOISE
// Creates ridge-like patterns by inverting noise peaks
//------------------------------------------------------------------------------

float noise_ridge(vec2 p, float offset) {
    float n = noise_simplex(p);
    n = abs(n);     // Create creases
    n = offset - n; // Invert so creases are at top
    n = n * n;      // Sharpen creases
    return n;
}

// Parameterized ridge noise
float noise_ridge(vec2 p, NoiseParams params) {
    float value = 0.0;
    float frequency = params.frequency;
    float amplitude = params.amplitude;
    float maxValue = 0.0;
    float prev = 1.0;  // Weight for successive octaves

    for(int i = 0; i < min(params.octaves, MAX_OCTAVES); i++) {
        float n = noise_ridge(p * frequency, params.offset);
        value += n * amplitude * prev;
        maxValue += amplitude;
        prev = n;
        frequency *= params.lacunarity;
        amplitude *= params.persistence;
    }

    return value / maxValue;
}

#endif